ADAM COLE

PROJECT 6


1.a.	
  	int main()
  	{
  		int arr[4] = { 0, 1, 2, 3 };
  		int* ptr = arr;
  		*ptr = arr[1];               		// set arr[0] to 1
  		*(ptr + 1) = arr[0] * 10;   	 	// set arr[1] to 10
  	 	ptr += 2;
		ptr[0] = arr[1] * 10;        		// set arr[2] to 100
	  	ptr[1] = 1000;                 		// set arr[3] to 1000
				                        // At this point, ptr points to arr[2], not arr[3]
		ptr++;	  	                        // This increments the arrow to the last index of arr
		while (ptr >= arr)
	  	{
	  		cout << " " << *ptr;    	// print values		
		  	ptr--; 				// In this code, ptr is decremented first, then
	                                    		//  displayed.  Must be opposite
			cout << " " << *ptr;    	// prints values
		}
		cout << endl;
		return(0);
	  }
  
ptr was pointing to the wrong index of arr[], therefore the  output was only the first two values 
in the array and then undefined values.  This is due to a combination of ptr not pointing to the 
last index in the array, and furthermore the while() loop moving the arrow down the array before 
displaying the outputs.  The program can be fixed by putting the output in the while() loop above 
ptr--; and to increment ptr below ptr[1] = 1000.


b.	
  	void findLastZero(int arr[], int n, int*& p) {  
                                                  		// Must pass pointer by reference as a parameter
                                                  		// if you want to edit the arrow of a pointer and not just the value    	
		p = nullptr;    		                 // default value if there isn't a 0 in the array at all
		  for (int k = n - 1; k >= 0; k--) {
			  if (arr[k] == 0) {                     // found an element whose value is 0
			  	p = arr + k;                     // change the value of p
			  	break;                           // stop looping and return
			  }		
  		}
 	 }

  	int main() {
		  int nums[6] = { 10, 20, 0, 40, 30, 50 };
		  int* ptr;
		  findLastZero(nums, 6, ptr);
	
		  if (ptr == nullptr) {
		  	cout << "The array doesn't have any zeros inside it." << endl;
		  }
		  else {
		  	cout << "The last zero is at address " << ptr << endl;
			cout << "It's at index " << ptr - nums << endl;
			cout << "The item's value is " << *ptr << " which is zero!" << endl;
		  }
		  return(0);
	  }

The pointer must be passed to the method by reference by using an ampersand so the copy 
of the pointer created in the function findLastZero() will also move the arrow and value 
of ptr as well.  Originally, the address of ptr was not modified by the function because 
it was accessing the address of ptr as read-only.  While ptr’s value can be modified without 
the use of the ampersand, the address cannot.  Therefore, when ptr was being used in the 
main(), it would throw an error for using ptr without initializing it.


c.	
  void biggest(int value1, int value2, int * resultPtr) {
  	if (value1 > value2) {
	  	*resultPtr = value1;
	  }
	  else {
	  	*resultPtr = value2;
	  }
  }

  int main()
  {
	  int* p;		                  //this creates a pointer without initializing
	  int *p = new int;	          	  //must create space for a new pointer by using “new”
	  biggest(15, 20, p);
	  cout << "The biggest value is " << *p << endl;
	  delete p;		                  // In memory allocation, when we create memory on the heap
	  return(0);		                  // we must also delete the memory after using it.
  }
  
In the main() we make a pointer and use it without initializing, but we must initialize 
pointers before using them or else our program will have undefined behavior and potential 
bugs.  Furthermore, we can’t initialize pointer p to nullptr because nullptr is an address 
that can’t be assigned a value.  Therefore, we must create space in memory to hold the 
value assigned in the function biggest() and have an address.  Therefore, we must initialize 
pointer p equal to “new int” which creates space on the heap for an integer.  Later, after 
p is used, we must delete the new int to recycle the memory on the heap.


  d.	
// return true if two C strings are equal 
bool match(const char str1[], const char str2[]) {
	bool result = true;
	const char * str1p = str1;//must turn the array of characters into actual pointers
	const char * str2p = str2;//  must be const because they come from const char[]’s
	while (*str1p != 0 && *str2p != 0) {  // zero bytes at ends 	
//must access the value pointed to by the pointer (in the while and the if)
		if (*str1p != *str2p) {  // compare corresponding characters
			result = false;
			break;
		}
		str1p++;    // advance to the next character
		str2p++;    //must advance by moving the arrow down the array of characters
	}
	if (result) {
		result = (*str1p == *str2p);    // both ended at same time?
	}
	return(result);
}

int main() {
	char a[10] = "pointy";
	char b[10] = "pointless";

	if (match(a, b)) {
		cout << "They're the same!" << endl;
	}
}

While str1 and str2 both act as pointers inherently because they are arrays, pointers to cycle through the arrays must be initialized because otherwise the arrays will be compared in full and not character by character.  Neither str1 or str2 equal 0 when comparing the full array, so if the arrays equal, the program would try to increment str1 and str2 (character arrays), which can’t be done, and the program would be caught in an infinite loop since neither array would never equal 0.  The method can be fixed by changing all the str1 and str2 variables to the pointers str1p and str2p, and when the values at these pointers are trying to be accessed, prefix the variables with an *.The fixed method compares each character to each other and if they aren’t equal, the method returns false.  If all the characters are equal, we must test to see that they end at the same time.

  e.	
	int fibonacci(int n) {
		int tmp;
		int a = 1;
		int b = 1;

		for (int i = 0; i < n - 2; i++) {
			tmp = a + b;
			a = b;
			b = tmp;
		}
		return b;
	}

	int* computeFibonacciSequence(int& n) {
		int arr[8];
		n = 8;
		for (int k = 0; k < n; k++) {
			arr[k] = fibonacci(k);
		}
		return arr;
	}

	int main()
	{
		int m;
		int* ptr = computeFibonacciSequence(m);
		for (int i = 0; i < m; i++) {
			cout << ptr[i] << ' ';
		}
		return(0);
	}
	
The majority of the program is correct, but one hidden logic error in the program lies between the end of computeFibonacciSequence() and the outputs in the for loop in the main().  While computeFibonacciSequence(m) returns the correct address of the array created in the method and assigns it to int * ptr, the values assigned to the addresses change from the Fibonacci numbers 1 1 2 3 5 8 13 21 (when they are accessed in computeFibonacciSequence()) to random undefined values (when they are accessed in the main code).  Therefore, the program does not run correctly.



2.	      Statement:			   Description:
         1.	string* fp;			        F
         2.	string fish[5];				G
         3.	fp = &fish[4];			        A
         4.	*fp = “salmon”;			        B
         5.	fp -= 3;		                D
         6.	*(fp + 3) = “salmon”;		        C
         7.	fp[0] = “salmon”;		        B
         8.	bool b = (fp == fish);		        E
         9.	bool b = (*fp == *(fp + 1));	   	H



3.	

	int* minimart(int* a, int* b) {
		if (*a < *b)
			return a;
		else
			return b;
	}
	
	void swap1(int* a, int *b) {
		int* temp = a;
		a = b;
		b = temp;
	}
	
	void swap2(int* a, int *b) {
		int temp = *a;
		*a = *b;
		*b = temp;
	}

	int main() {
		int array[6] = { 5, 3, 4, 17, 22, 19 };
	
		int* ptr = minimart(array, &array[2]);
		ptr[1] = 9;
		ptr += 2;
		*ptr = -1;
		*(array + 1) = 79;

		cout << "diff=" << &array[5] - ptr << endl;

		swap1(&array[0], &array[1]);
		swap2(array, &array[2]);
	
		for (int i = 0; i < 6; i++)
			cout << array[i] << endl;
	
		return(0);
	} 

The output for the function above is as follows:
  diff=1
  4
  79
  5
  9
  -1
  19
  
The difference is 1 because ptr is originally set to the address &array[2] after 
minimart(array, &array[2]).  Then ptr is changed to &array[4] when it is incremented 
by two.  Therefore, the difference between &array[5] and &array[4] is 1.

Int array begins as {5, 3, 4, 17, 22, 19}.  When ptr is at the address &address[2], 
ptr[1] is set as 9.  Later, when ptr is at the address &array[4], *ptr is set to -1.  
Then, * (array+1) was set to 79.   At this point, the int array is now {5, 79, 4, 9, -1, 19}.  
Lastly, swap1(&array[0], &array[1]) changes nothing because &array[0] and &array[1] 
are constants, not variables.  Therefore, in swap1(), the variables switching are all 
temporary variables and don’t change anything.  Furthermore, the pointers are the only 
things that switch – not values in the array.  So - nothing changes in the array.  
Then when swap2(array, &array[2]) is called, the values at array[0] and array[2] switch.  
Therefore, the final array is {4, 79, 5, 9, -1, 19}.  The last for loop outputs each 
element in the array, so that’s why the outputs are as so.

4.	

  void deleteCapitals(char * c) {
	                                                 // start temp and c at the same address
	  char * temp = c;
	                                                 // run until end of the c string
	  do {
	  	                                         // increment address of c until *c is lowercase
		  while (*c > 64 && *c < 91) {
		  	c++;
		  }
		  *temp = *c;                             // Lowercase:
		  temp++;                                 //	assign the lowercase character to where the 
		  c++;                                    //	uppercase letter is and then increment both
		                                          //	temp and c
	  } while (*c != '\0');
	                                                  // set the next temp as the '\0' to end the c string
	  *temp = '\0';
  }
  
  int main()
  {
	  char msg[100] = "Happy Days Are Here Again!";
	  deleteCapitals(msg);
	  cout << msg << endl;                            // prints:   appy ays re ere gain!
  }
